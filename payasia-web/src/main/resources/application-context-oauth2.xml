<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
    xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/security/oauth2
						http://www.springframework.org/schema/security/spring-security-oauth2.xsd" >


 <!-- Enable global method security -->
 <global-method-security pre-post-annotations="enabled" /> 
 <context:property-placeholder location="classpath:payasia-app.properties" />
 <context:annotation-config/>
 
  <!-- swagger URL by pass security -->
 <http pattern="/swagger/**" security="none" />
 <http pattern="/swagger-ui.html/**" security="none" />
 <http pattern="/v2/api-docs/**" security="none" />
 <http pattern="/swagger-resources/**" security="none" />
 <http pattern="/configuration/**" security="none" />
 <http pattern="/webjars/**" security="none" />

  <!-- oauth2 URL --> 
 <http pattern="/oauth/token" create-session="stateless"  auto-config="true" authentication-manager-ref="payAsiaAuthenticationManager" >
        <intercept-url pattern="/oauth/token" access="permitAll" />
        <anonymous enabled="false" />
        <http-basic entry-point-ref="clientAuthenticationEntryPoint" />
        <custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <!--Security headers  -->
	<headers>
		<cache-control />
		<content-type-options />
		<frame-options policy="SAMEORIGIN" />
		<hsts />
		<xss-protection />
	</headers>
	 <cors/>
	<csrf disabled="true" />
  </http>

  <!-- oauth2 entry point --> 
  <http pattern="/payasia/**" create-session="never"  entry-point-ref="oauthAuthenticationEntryPoint">
        <anonymous enabled="false" />
        <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
     
	    <!-- PAYASIA MODULES-->
		<intercept-url pattern="/employee/hris**" access="hasAnyRole('MODULE_HRIS')" />
		<intercept-url pattern="/employee/claim**" access="hasAnyRole('MODULE_CLAIM')" />
		<intercept-url pattern="/employee/leave**" access="hasAnyRole('MODULE_LEAVE')" />
		<intercept-url pattern="/employee/lundin**" access="hasAnyRole('MODULE_LUNDIN_TIMESHEET')" />
		<intercept-url pattern="/employee/lion**" access="hasAnyRole('MODULE_LION_TIMESHEET')" />
		<intercept-url pattern="/employee/coherent**" access="hasAnyRole('MODULE_COHERENT_TIMESHEET')" />
     
        <intercept-url pattern="/admin*" access="hasAnyRole('PRIV_INFO_SWITCH_ROLE')"/>	
     
        <intercept-url pattern="/employee/**"
			access="hasAnyRole('PRIV_CONTACT_US','PRIV_YEAR_END_PROCESSING','PRIV_ADD_LEAVES','PRIV_ADD_CLAIMS','PRIV_MODIFY_CLAIMS',
								        'PRIV_WITHDRAW_CLAIMS','PRIV_MODIFY_LEAVES','PRIV_WITHDRAW_LEAVES','PRIV_ADD_OT','PRIV_MODIFY_OT','PRIV_WITHDRAW_OT',
								        'PRIV_PENDING_ITEMS','PRIV_EMAIL','PRIV_MY_REQUESTS','PRIV_CHANGE_PASSWORD','PRIV_MY_PROFILE',
								        'PRIV_MY_BALANCES','PRIV_TASKS_WORKFLOW_DELEGATES','PRIV_INFO_PAY_SLIP','PRIV_INFO_DOCUMENT_CENTER','PRIV_INFO_SWITCH_ROLE')" />


    <!--Security headers  -->
	<headers>
		<cache-control />
		<content-type-options />
		<frame-options policy="SAMEORIGIN" />
		<hsts />
		<xss-protection />
	</headers>
	 <cors/>
	<csrf disabled="true" />
  </http>
  
  <!-- OAuth2 related configuration -->  
  <beans:bean id="oauthAuthenticationEntryPoint"
        class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
  </beans:bean>
  <beans:bean id="clientAuthenticationEntryPoint"
        class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <beans:property name="realmName" value="springsec/client" />
        <beans:property name="typeName" value="Basic" />
  </beans:bean>
  <beans:bean id="oauthAccessDeniedHandler"
        class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler">
  </beans:bean>
  <beans:bean id="clientCredentialsTokenEndpointFilter"
        class="com.payasia.api.oauth.OAuth2CredentialsTokenEndpointFilter">
        <beans:property name="authenticationManager" ref="payAsiaAuthenticationManager" />
  </beans:bean>
  
  <beans:bean id="clientDetailsUserService"
        class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <beans:constructor-arg ref="clientDetails" />
  </beans:bean>
  
  <authentication-manager  id="payAsiaAuthenticationManager">
       <authentication-provider user-service-ref="clientDetailsUserService" />
  </authentication-manager>
  
  <authentication-manager id="userAuthenticationManager">
    <authentication-provider ref="customUserAuthenticationProvider" />
  </authentication-manager>
  
  <!--Custom Bean -->
  <beans:bean id="urlUtils" class="com.payasia.web.util.URLUtils" />
  <beans:bean id="passwordEncoder" class="com.payasia.logic.util.PayAsiaPaswordEncoder" />
  <beans:bean id="tokenEnhancer" class="com.payasia.api.oauth.OAuth2CustomToken" />
  <beans:bean id="customUserAuthenticationProvider" class="com.payasia.api.oauth.UserAuthenticationProvider"/>
  
  <!--client details Details -->
 <oauth:client-details-service id="clientDetails" >
   <oauth:client client-id="${oauth2.client.id}" authorized-grant-types="password,refresh_token,client_credentials" scope="read,write,trust" secret="${oauth2.client.secret}" />
 </oauth:client-details-service>
  
  <!--Authorization Server Details -->
  <oauth:authorization-server  client-details-service-ref="clientDetails" token-services-ref="tokenServices"  token-endpoint-url="/oauth/token" >
  <oauth:authorization-code disabled="true"/>
  <oauth:implicit  disabled="true"/>
  <oauth:refresh-token/>
  <oauth:client-credentials/>
  <oauth:password authentication-manager-ref="userAuthenticationManager" />
  </oauth:authorization-server>
  
  <oauth:resource-server id="resourceServerFilter" resource-id="springsec" token-services-ref="tokenServices"/>

 <!--We have used Redis Token Store to store the tokens, we can use In Memory token store for development purpose -->
  <!-- <beans:bean id="tokenStore"  class="org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore" >
    <beans:property name="authenticationKeyGenerator">
        <beans:bean class="com.payasia.api.oauth.UniqueAuthenticationKeyGenerator" />
    </beans:property>
  </beans:bean> -->
 
  <beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore" >
     <beans:property name="authenticationKeyGenerator">
        <beans:bean class="com.payasia.api.oauth.UniqueAuthenticationKeyGenerator" />
    </beans:property>
   </beans:bean> 
 
 <!--Token Details -->
  <beans:bean id="tokenServices"
        class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <beans:property name="tokenStore" ref="tokenStore" />
        <beans:property name="accessTokenValiditySeconds" value="${oauth2.access.token.expiration}" />
        <beans:property name="refreshTokenValiditySeconds" value="${oauth2.refresh.token.expiration}"/>
        <beans:property name="supportRefreshToken" value="true"/>
        <beans:property name="reuseRefreshToken" value="false" /> 
        <beans:property name="clientDetailsService" ref="clientDetails" />
        <beans:property name="tokenEnhancer" ref="tokenEnhancer" />
  </beans:bean>

	<beans:bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<beans:property name="targetClass" value="org.springframework.security.core.context.SecurityContextHolder" />
		<beans:property name="targetMethod" value="setStrategyName" />
		<beans:property name="arguments" value="MODE_INHERITABLETHREADLOCAL" />
	</beans:bean>

</beans:beans>
