<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- -->
	<global-method-security pre-post-annotations="enabled" />

	<http pattern="/payasia/**" security="none" />
	
	<http pattern="/resources/**" security="none" />
	<http pattern="/favicon.ico" security="none" />

	<http realm="Contacts Realm" auto-config="true" use-expressions="true">
		<!-- <custom-filter ref="metadataGeneratorFilter" before="FIRST" /> -->
		<custom-filter ref="payAsiaAuthFilter" before="SESSION_MANAGEMENT_FILTER" />
		<custom-filter ref="sessionExpirationFilter" before="FORM_LOGIN_FILTER" />
		<custom-filter ref="samlFilter"  after="FORM_LOGIN_FILTER" />
		<intercept-url pattern="/" access="permitAll" />
		<intercept-url pattern="/WEB-INF/views/welcome.jsp" access="permitAll" />

		<intercept-url pattern="/service/*" access="permitAll" />
		<intercept-url pattern="/applet/*" access="permitAll" />
		<intercept-url pattern="/portal/login.html" access="permitAll" />
		<intercept-url pattern="/portal/*/login.html" access="permitAll" />
		<intercept-url pattern="/portal/login.html*" access="permitAll" />
		<intercept-url pattern="/portal/*/login.html*" access="permitAll" />
		<intercept-url pattern="/portal/sessionExpired.html" access="permitAll" />
		<intercept-url pattern="/portal/*/sessionExpired.html" access="permitAll" />
		<intercept-url pattern="/portal/sessionExpired.html*" access="permitAll" />
		<intercept-url pattern="/portal/*/sessionExpired.html*" access="permitAll" />
		<intercept-url pattern="/forgetPassword.html" access="permitAll" />
		<intercept-url pattern="/forgetPassword.html*" access="permitAll" />
		<intercept-url pattern="/resetPassword" access="permitAll" />
		<intercept-url pattern="/resetPassword*" access="permitAll" />
		<intercept-url pattern="/resetForgotPassword" access="permitAll" />
		<intercept-url pattern="/resetForgotPassword*" access="permitAll" />
		<intercept-url pattern="/LoginPageLogo.html" access="permitAll" />
		<intercept-url pattern="/LoginPageLogo.html*" access="permitAll" />
		<intercept-url pattern="/CompanyLogoSize.html" access="permitAll" />
		<intercept-url pattern="/CompanyLogoSize.html*" access="permitAll" />
		<intercept-url pattern="/contactEmail.html" access="permitAll" />
		<intercept-url pattern="/contactEmail.html*" access="permitAll" />
		<intercept-url pattern="/hris/employee/viewdoc*" access="permitAll" />
		<intercept-url pattern="/user/auth/gen*" access="permitAll" />
		
		
		<intercept-url pattern="/WEB-INF/views/errors/**"
			access="permitAll" />
		<intercept-url pattern="/portal/*/admin*" access="hasAnyRole(
									        'PRIV_INFO_SWITCH_ROLE')"/>	
		<intercept-url pattern="/portal/*/admin/**" access="hasAnyRole(
									        'PRIV_INFO_SWITCH_ROLE')"/>	
											
		<intercept-url pattern="/admin*" access="hasAnyRole(
									        'PRIV_INFO_SWITCH_ROLE')"/>	
		<intercept-url pattern="/admin/**" access="hasAnyRole(
									        'PRIV_INFO_SWITCH_ROLE')"/>	
			
		<intercept-url pattern="/employee/*Claim**" access="hasAnyRole('MODULE_CLAIM')"/>
		<intercept-url pattern="/employee/**/*Claim**" access="hasAnyRole('MODULE_CLAIM')"/>
		<intercept-url pattern="/employee/*Leave**" access="hasAnyRole('MODULE_LEAVE')"/>
		<intercept-url pattern="/employee/**/*Leave**" access="hasAnyRole('MODULE_LEAVE')"/>
		<intercept-url pattern="/employee/*lundin**" access="hasAnyRole('MODULE_LUNDIN_TIMESHEET')"/>
		<intercept-url pattern="/employee/**/*lundin**" access="hasAnyRole('MODULE_LUNDIN_TIMESHEET')"/>
		<intercept-url pattern="/employee/*lion**" access="hasAnyRole('MODULE_LION_TIMESHEET')"/>
		<intercept-url pattern="/employee/**/*lion**" access="hasAnyRole('MODULE_LION_TIMESHEET')"/>
		<intercept-url pattern="/employee/*coherent**" access="hasAnyRole('MODULE_COHERENT_TIMESHEET')"/>
		<intercept-url pattern="/employee/**/*coherent**" access="hasAnyRole('MODULE_COHERENT_TIMESHEET')"/>
		
		<intercept-url pattern="/portal/*/employee*" access="hasAnyRole('PRIV_CONTACT_US','PRIV_YEAR_END_PROCESSING','PRIV_ADD_LEAVES','PRIV_ADD_CLAIMS','PRIV_MODIFY_CLAIMS',
								        'PRIV_WITHDRAW_CLAIMS','PRIV_MODIFY_LEAVES','PRIV_WITHDRAW_LEAVES','PRIV_ADD_OT','PRIV_MODIFY_OT','PRIV_WITHDRAW_OT',
								        'PRIV_PENDING_ITEMS','PRIV_EMAIL','PRIV_MY_REQUESTS','PRIV_CHANGE_PASSWORD','PRIV_MY_PROFILE',
								        'PRIV_MY_BALANCES','PRIV_TASKS_WORKFLOW_DELEGATES','PRIV_INFO_PAY_SLIP','PRIV_INFO_DOCUMENT_CENTER','PRIV_INFO_SWITCH_ROLE')" />

		<intercept-url pattern="/portal/*/employee/**"
			access="hasAnyRole('PRIV_CONTACT_US','PRIV_YEAR_END_PROCESSING','PRIV_ADD_LEAVES','PRIV_ADD_CLAIMS','PRIV_MODIFY_CLAIMS',
								        'PRIV_WITHDRAW_CLAIMS','PRIV_MODIFY_LEAVES','PRIV_WITHDRAW_LEAVES','PRIV_ADD_OT','PRIV_MODIFY_OT','PRIV_WITHDRAW_OT',
								        'PRIV_PENDING_ITEMS','PRIV_EMAIL','PRIV_MY_REQUESTS','PRIV_CHANGE_PASSWORD','PRIV_MY_PROFILE',
								        'PRIV_MY_BALANCES','PRIV_TASKS_WORKFLOW_DELEGATES','PRIV_INFO_PAY_SLIP','PRIV_INFO_DOCUMENT_CENTER','PRIV_INFO_SWITCH_ROLE')" />


		<intercept-url pattern="/employee*"
			access="hasAnyRole('PRIV_CONTACT_US','PRIV_YEAR_END_PROCESSING','PRIV_ADD_LEAVES','PRIV_ADD_CLAIMS','PRIV_MODIFY_CLAIMS',
								        'PRIV_WITHDRAW_CLAIMS','PRIV_MODIFY_LEAVES','PRIV_WITHDRAW_LEAVES','PRIV_ADD_OT','PRIV_MODIFY_OT','PRIV_WITHDRAW_OT',
								        'PRIV_PENDING_ITEMS','PRIV_EMAIL','PRIV_MY_REQUESTS','PRIV_CHANGE_PASSWORD','PRIV_MY_PROFILE',
								        'PRIV_MY_BALANCES','PRIV_TASKS_WORKFLOW_DELEGATES','PRIV_INFO_PAY_SLIP','PRIV_INFO_DOCUMENT_CENTER','PRIV_INFO_SWITCH_ROLE')" />

		<intercept-url pattern="/employee/**"
			access="hasAnyRole('PRIV_CONTACT_US','PRIV_YEAR_END_PROCESSING','PRIV_ADD_LEAVES','PRIV_ADD_CLAIMS','PRIV_MODIFY_CLAIMS',
								        'PRIV_WITHDRAW_CLAIMS','PRIV_MODIFY_LEAVES','PRIV_WITHDRAW_LEAVES','PRIV_ADD_OT','PRIV_MODIFY_OT','PRIV_WITHDRAW_OT',
								        'PRIV_PENDING_ITEMS','PRIV_EMAIL','PRIV_MY_REQUESTS','PRIV_CHANGE_PASSWORD','PRIV_MY_PROFILE',
								        'PRIV_MY_BALANCES','PRIV_TASKS_WORKFLOW_DELEGATES','PRIV_INFO_PAY_SLIP','PRIV_INFO_DOCUMENT_CENTER','PRIV_INFO_SWITCH_ROLE')" />


		<intercept-url pattern="/checkAjaxSession.html"
			access="hasAnyRole('PRIV_CONTACT_US','PRIV_YEAR_END_PROCESSING','PRIV_ADD_LEAVES','PRIV_ADD_CLAIMS','PRIV_MODIFY_CLAIMS',
								        'PRIV_WITHDRAW_CLAIMS','PRIV_MODIFY_LEAVES','PRIV_WITHDRAW_LEAVES','PRIV_ADD_OT','PRIV_MODIFY_OT','PRIV_WITHDRAW_OT',
								        'PRIV_PENDING_ITEMS','PRIV_EMAIL','PRIV_MY_REQUESTS','PRIV_CHANGE_PASSWORD','PRIV_MY_PROFILE',
								        'PRIV_MY_BALANCES','PRIV_TASKS_WORKFLOW_DELEGATES','PRIV_INFO_PAY_SLIP','PRIV_INFO_DOCUMENT_CENTER','PRIV_INFO_SWITCH_ROLE')" />

		<form-login login-page="/portal/login.html"
			authentication-failure-url="/portal/login.html?login_error=1"
			authentication-success-handler-ref="payAsiaAuthenticationSuccessHandler"
			default-target-url="/portal/login.html"
			always-use-default-target="true" />
		<logout success-handler-ref="payAsiaLogoutSuccessHandler" invalidate-session="true" logout-url="/j_spring_security_logout" />
		<session-management />
		<!-- Security header added by Manoj-->
		<headers>
		  <cache-control/>
		  <content-type-options/>
		  <frame-options policy="SAMEORIGIN"/>
		  <hsts/>
		  <xss-protection/>
		</headers>
        <cors/>
		<csrf disabled="true"/>
		<!-- CSRF TOKEN ENABLE-->
		<!-- <csrf request-matcher-ref="csrfSecurityRequestMatcher" /> -->
		
	</http>

     <!-- CSRF REQUEST MATCHER-->
    <beans:bean id="csrfSecurityRequestMatcher" class="com.payasia.web.security.CsrfSecurityRequestMatcher" />
    
	<beans:bean id="sas"
      class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy"/>

	<beans:bean id="sessionExpirationFilter" class="com.payasia.web.security.PayAsiaSessionFilter">
		<!-- <custom-filter position="FIRST"/> -->
		<beans:property name="expiredUrl" value="/portal/sessionExpired.html" />
	</beans:bean>

	<beans:bean id="payAsiaAuthFilter" class="com.payasia.web.security.PayAsiaAuthenticationFilter" lazy-init="true">
		<beans:property name="authenticationManager" ref="payAsiaAuthenticationManager" />
		<beans:property name="authenticationFailureHandler" ref="payAsiaRedirFailedHandler" />
		<beans:property name="authenticationSuccessHandler" ref="payAsiaAuthenticationSuccessHandler" />
		<beans:property name="sessionAuthenticationStrategy" ref="sas" />
	</beans:bean>

	<beans:bean id="payAsiaRedirFailedHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<beans:property name="defaultFailureUrl" value="/portal/login.html?login_error=1" />
		<beans:property name="redirectStrategy" ref="payasiaFailedRedirStrategy" />
	</beans:bean>

	<beans:bean id="payasiaFailedRedirStrategy" class="com.payasia.web.security.PayAsiaLoginFailureRedirectStrategy" />

	<authentication-manager alias="payAsiaAuthenticationManager">
		<authentication-provider ref="samlAuthenticationProvider" />
		<authentication-provider ref="payAsiaAuthenticationProvider" />
	</authentication-manager>

	<beans:bean id="payAsiaAuthenticationProvider" class="com.payasia.web.security.PayAsiaAuthenticationProvider" lazy-init="true" />

	<beans:bean id="payAsiaAuthenticationSuccessHandler" class="com.payasia.web.security.PayAsiaAuthenticationSuccessHandler" />

	<beans:bean id="payAsiaLogoutSuccessHandler" class="com.payasia.web.security.PayAsiaLogoutSuccessHandler" lazy-init="true" />

	<beans:bean id="urlUtils" class="com.payasia.web.util.URLUtils" />

	<beans:bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<beans:property name="targetClass" value="org.springframework.security.core.context.SecurityContextHolder" />
		<beans:property name="targetMethod" value="setStrategyName" />
		<beans:property name="arguments" value="MODE_INHERITABLETHREADLOCAL" />
	</beans:bean>

	<beans:bean id="passwordEncoder" class="com.payasia.logic.util.PayAsiaPaswordEncoder" />


	<!-- SAML Configuration -->
	<!-- Filters for processing of SAML messages -->
	<beans:bean id="samlFilter" class="org.springframework.security.web.FilterChainProxy">
		<filter-chain-map request-matcher="ant">
			<filter-chain pattern="/saml/login/**" filters="samlEntryPoint" />
			<filter-chain pattern="/saml/logout/**" filters="samlLogoutFilter" />
			<filter-chain pattern="/saml/metadata/**" filters="metadataDisplayFilter" />
			<filter-chain pattern="/saml/SSO/**" filters="samlWebSSOProcessingFilter" />
			<filter-chain pattern="/saml/SSOHoK/**" filters="samlWebSSOHoKProcessingFilter" />
			<filter-chain pattern="/saml/SingleLogout/**" filters="samlLogoutProcessingFilter" />
			<filter-chain pattern="/saml/discovery/**" filters="samlIDPDiscovery" />
		</filter-chain-map>
	</beans:bean>

	<!-- Handler deciding where to redirect user after successful login -->
	<beans:bean id="samlSuccessRedirectHandler" class="com.payasia.saml.security.PayAsiaSAMLAuthenticationSuccessHandler">
		<beans:property name="defaultTargetUrl" value="/" />
	</beans:bean>
	
	<!-- Use the following for interpreting RelayState coming from unsolicited 
		response as redirect URL: <bean id="samlSuccessRedirectHandler" class="org.springframework.security.saml.SAMLRelayStateSuccessHandler"> 
		<property name="defaultTargetUrl" value="/" /> </bean> -->

	<!-- Handler for successful logout -->
	<beans:bean id="successLogoutHandler" class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
		<beans:property name="defaultTargetUrl" value="/portal/login.html" />
	</beans:bean>

	<!-- Logger for SAML messages and events -->
	<beans:bean id="samlLogger" class="org.springframework.security.saml.log.SAMLDefaultLogger">
		<!-- Enable these to see the actual SAML Messages in logs -->
		<beans:property name="logMessages" value="true"/>
		<beans:property name="logErrors" value="true"/>
	</beans:bean>

	<!-- PayAsia Central storage of cryptographic keys --> 
	<beans:bean id="keyManager" class="org.springframework.security.saml.key.JKSKeyManager">
		<beans:constructor-arg value="classpath:security/payasiasamlkeystore.jks" />
		<beans:constructor-arg type="java.lang.String" value="payasia@Mind1#" />
		<beans:constructor-arg>
			<beans:map>
				<beans:entry key="payasia" value="payasia@Mind1#" />
			</beans:map>
		</beans:constructor-arg>
		<beans:constructor-arg type="java.lang.String" value="payasia" />
	</beans:bean>

	<!-- Entry point to initialize authentication, default values taken from 
		properties file -->
	<beans:bean id="samlEntryPoint" class="org.springframework.security.saml.SAMLEntryPoint">
		<beans:property name="defaultProfileOptions">
			<beans:bean class="org.springframework.security.saml.websso.WebSSOProfileOptions">
				<beans:property name="includeScoping" value="false" />
			</beans:bean>
		</beans:property>
	</beans:bean>

	<!-- IDP Discovery Service -->
	<beans:bean id="samlIDPDiscovery" class="org.springframework.security.saml.SAMLDiscovery">
		<beans:property name="idpSelectionPath" value="/WEB-INF/security/idpSelection.jsp" />
	</beans:bean> 

	<!-- Filter automatically generates default SP metadata 
	<beans:bean id="metadataGeneratorFilter" class="org.springframework.security.saml.metadata.MetadataGeneratorFilter">
		<beans:constructor-arg>
			<beans:bean class="org.springframework.security.saml.metadata.MetadataGenerator">
				<beans:property name="entityId" value="${payasia.saml.sp.entity.id}" />
				<beans:property name="entityBaseURL" value="${payasia.saml.sp.entity.base.url}" />
				<beans:property name="extendedMetadata">
					<beans:bean class="org.springframework.security.saml.metadata.Extendedttadata">
						<beans:property name="signMetadata" value="false" />
						<beans:property name="idpDiscoveryEnabled" value="false" />
					</beans:bean>
				</beans:property>
			</beans:bean>
		</beans:constructor-arg>
	</beans:bean> -->

	<!-- The filter is waiting for connections on URL suffixed with filterSuffix 
		and presents SP metadata there -->
	<beans:bean id="metadataDisplayFilter" class="org.springframework.security.saml.metadata.MetadataDisplayFilter" />

	<!-- Configure HTTP Client to accept certificates from the keystore for 
		HTTPS verification -->
	<!-- <bean class="org.springframework.security.saml.trust.httpclient.TLSProtocolConfigurer"> 
		<property name="sslHostnameVerification" value="default"/> </bean> -->

	<!-- IDP Metadata configuration - paths to metadata of IDPs in circle of 
		trust is here -->
	<beans:bean id="metadata" class="org.springframework.security.saml.metadata.CachingMetadataManager">
		<beans:constructor-arg>
		<beans:list>
			<!-- IDP Metadata -->
				<beans:bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
					<beans:constructor-arg>
						<beans:bean class="org.opensaml.saml2.metadata.provider.ResourceBackedMetadataProvider">
							<beans:constructor-arg>
								<beans:bean class="java.util.Timer" />
							</beans:constructor-arg>
							<beans:constructor-arg>
								<beans:bean class="org.opensaml.util.resource.ClasspathResource">
									<beans:constructor-arg value="/metadata/idp_metadata.xml" />
								</beans:bean>
							</beans:constructor-arg>
							<beans:property name="parserPool" ref="parserPool" />
						</beans:bean>
					</beans:constructor-arg>
					<beans:constructor-arg>
						<beans:bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
						</beans:bean>
					</beans:constructor-arg>
				</beans:bean>
			</beans:list>
		</beans:constructor-arg>
	</beans:bean>

	<!-- SAML Authentication Provider responsible for validating of received 
		SAML messages -->
	<beans:bean id="samlAuthenticationProvider" class="com.payasia.saml.security.PayAsiaSAMLAuthenticationProvider" />
	

	<!-- Provider of default SAML Context -->
	<beans:bean id="contextProvider" class="com.payasia.saml.security.PayAsiaSAMLContextProviderLB">
		<beans:property name="scheme" value="${payasia.saml.context.provider.scheme}"/>
 		<beans:property name="serverPort" value="${payasia.saml.context.provider.serverPort}"/>
 		<beans:property name="includeServerPortInRequestURL" value="${payasia.saml.context.provider.includeServerPortInRequestURL}"/>
 		<beans:property name="contextPath" value="${payasia.saml.context.provider.contextPath}"/>
		<beans:property name="storageFactory">
    		<beans:bean class="org.springframework.security.saml.storage.EmptyStorageFactory"/>
  		</beans:property>
	</beans:bean>

	<!-- Processing filter for WebSSO profile messages -->
	<beans:bean id="samlWebSSOProcessingFilter" class="org.springframework.security.saml.SAMLProcessingFilter">
		<beans:property name="authenticationManager" ref="payAsiaAuthenticationManager" />
		<beans:property name="authenticationSuccessHandler" ref="samlSuccessRedirectHandler" />
		<beans:property name="authenticationFailureHandler" ref="payAsiaRedirFailedHandler" />
	</beans:bean>

	<!-- Processing filter for WebSSO Holder-of-Key profile -->
	<beans:bean id="samlWebSSOHoKProcessingFilter" class="org.springframework.security.saml.SAMLWebSSOHoKProcessingFilter">
		<beans:property name="authenticationManager" ref="payAsiaAuthenticationManager" />
		<beans:property name="authenticationSuccessHandler" ref="samlSuccessRedirectHandler" />
		<beans:property name="authenticationFailureHandler" ref="payAsiaRedirFailedHandler" />
	</beans:bean>

	<!-- Logout handler terminating local session -->
	<beans:bean id="logoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
		<beans:property name="invalidateHttpSession" value="false" />
	</beans:bean>

	<!-- Override default logout processing filter with the one processing 
		SAML messages -->
	<beans:bean id="samlLogoutFilter" class="org.springframework.security.saml.SAMLLogoutFilter">
		<beans:constructor-arg index="0" ref="successLogoutHandler" />
		<beans:constructor-arg index="1" ref="logoutHandler" />
		<beans:constructor-arg index="2" ref="logoutHandler" />
	</beans:bean>

	<!-- Filter processing incoming logout messages -->
	<!-- First argument determines URL user will be redirected to after successful 
		global logout -->
	<beans:bean id="samlLogoutProcessingFilter" class="org.springframework.security.saml.SAMLLogoutProcessingFilter">
		<beans:constructor-arg index="0" ref="successLogoutHandler" />
		<beans:constructor-arg index="1" ref="logoutHandler" />
	</beans:bean>

	<!-- Class loading incoming SAML messages from httpRequest stream -->
	<beans:bean id="processor" class="org.springframework.security.saml.processor.SAMLProcessorImpl">
		<beans:constructor-arg>
			<beans:list>
				<beans:ref bean="redirectBinding" />
				<beans:ref bean="postBinding" />
				<beans:ref bean="artifactBinding" />
				<beans:ref bean="soapBinding" />
				<beans:ref bean="paosBinding" />
			</beans:list>
		</beans:constructor-arg>
	</beans:bean>

	<!-- SAML 2.0 WebSSO Assertion Consumer -->
	<beans:bean id="webSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerImpl" >
		<beans:property name="maxAuthenticationAge" value="${payasia.saml.max.authentication.age}" />
	</beans:bean>
	<!-- SAML 2.0 Holder-of-Key WebSSO Assertion Consumer -->
	<beans:bean id="hokWebSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl" />

	<!-- SAML 2.0 Web SSO profile -->
	<beans:bean id="webSSOprofile" class="org.springframework.security.saml.websso.WebSSOProfileImpl" />

	<!-- SAML 2.0 Holder-of-Key Web SSO profile -->
	<beans:bean id="hokWebSSOProfile" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl" />

	<!-- SAML 2.0 ECP profile -->
	<beans:bean id="ecpprofile" class="org.springframework.security.saml.websso.WebSSOProfileECPImpl" />

	<!-- SAML 2.0 Logout Profile -->
	<beans:bean id="logoutprofile" class="org.springframework.security.saml.websso.SingleLogoutProfileImpl" />

	<!-- Bindings, encoders and decoders used for creating and parsing messages -->
	<beans:bean id="postBinding" class="org.springframework.security.saml.processor.HTTPPostBinding">
		<beans:constructor-arg ref="parserPool" />
		<beans:constructor-arg ref="velocityEngine" />
	</beans:bean>

	<beans:bean id="redirectBinding" class="org.springframework.security.saml.processor.HTTPRedirectDeflateBinding">
		<beans:constructor-arg ref="parserPool" />
	</beans:bean>

	<beans:bean id="artifactBinding" class="org.springframework.security.saml.processor.HTTPArtifactBinding">
		<beans:constructor-arg ref="parserPool" />
		<beans:constructor-arg ref="velocityEngine" />
		<beans:constructor-arg>
			<beans:bean class="org.springframework.security.saml.websso.ArtifactResolutionProfileImpl">
				<beans:constructor-arg>
					<beans:bean class="org.apache.commons.httpclient.HttpClient">
						<beans:constructor-arg>
							<beans:bean class="org.apache.commons.httpclient.MultiThreadedHttpConnectionManager" />
						</beans:constructor-arg>
					</beans:bean>
				</beans:constructor-arg>
				<beans:property name="processor">
					<beans:bean class="org.springframework.security.saml.processor.SAMLProcessorImpl">
						<beans:constructor-arg ref="soapBinding" />
					</beans:bean>
				</beans:property>
			</beans:bean>
		</beans:constructor-arg>
	</beans:bean>

	<beans:bean id="soapBinding" class="org.springframework.security.saml.processor.HTTPSOAP11Binding">
		<beans:constructor-arg ref="parserPool" />
	</beans:bean>

	<beans:bean id="paosBinding" class="org.springframework.security.saml.processor.HTTPPAOS11Binding">
		<beans:constructor-arg ref="parserPool" />
	</beans:bean>

	<!-- Initialization of OpenSAML library -->
	<beans:bean class="org.springframework.security.saml.SAMLBootstrap" />

	<!-- Initialization of the velocity engine -->
	<beans:bean id="velocityEngine" class="org.springframework.security.saml.util.VelocityFactory" factory-method="getEngine" />

	<!-- XML parser pool needed for OpenSAML parsing WARNING: If customizing 
		a ParserPool implementation See https://shibboleth.net/community/advisories/secadv_20131213.txt 
		Specifically the following should be explicitly set to avoid exploits: 1) 
		set pool property 'expandEntityReferences' to 'false' 2) set feature 'javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING' 
		to true 3) set feature 'http://apache.org/xml/features/disallow-doctype-decl' 
		to true. This is a Xerces-specific feature, including derivatives such as 
		the internal JAXP implementations supplied with the Oracle and OpenJDK JREs. 
		For other JAXP implementations, consult the documentation for the implementation 
		for guidance on how to achieve a similar configuration. -->
	<beans:bean id="parserPool" class="org.opensaml.xml.parse.StaticBasicParserPool" init-method="initialize" />

	<beans:bean id="parserPoolHolder" class="org.springframework.security.saml.parser.ParserPoolHolder" />
</beans:beans>
